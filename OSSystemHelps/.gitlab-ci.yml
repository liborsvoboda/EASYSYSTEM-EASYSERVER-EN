
deploy-to-test-job:
  stage: deploy
  image: docker:latest
  #image: google/cloud-sdk:latest
  services:
    - docker:dind
  only:
    - main   
  before_script:
    - docker login registry.gitlab.com -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD}
    - echo $GCP_SERVICE_KEY | docker login -u _json_key --password-stdin https://gcr.io

  script:
    - docker build -t ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest .
  #  - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest
  #  - docker pull ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest
    - docker tag ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest "gcr.io/$GCLOUD_PROJECT/$GCLOUD_SERVICE_NAME:latest"
    #- docker pull "registry.gitlab.com/DATAPUBlisher/websocket:latest"
    #- docker tag "registry.gitlab.com/DATAPUBlisher/websocket:latest" "gcr.io/$GCLOUD_PROJECT/$GCLOUD_SERVICE_NAME:latest"
    - docker push "gcr.io/$GCLOUD_PROJECT/$GCLOUD_SERVICE_NAME:latest"

   # - echo $GCP_SERVICE_KEY > gcloud-service-key.json # Google Cloud service accounts
   # - gcloud auth activate-service-account --key-file gcloud-service-key.json
   # - gcloud config set project $GCLOUD_PROJECT
   #
   # - |
   #     cat << EOF > cloudbuild.yaml
   #     steps:
   #     - name: 'gcr.io/cloud-builders/docker'
   #       args: ['build', '-t', 'gcr.io/DATAPUBlisher/websocket:latest', '.']
   #     images: ['gcr.io/DATAPUBlisher/websocket:latest']
   #     EOF
   # - gcloud builds submit . --config=cloudbuild.yaml

  after_script:
    - docker logout ${CI_REGISTRY}
  tags: 
    - docker